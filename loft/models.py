from django.db import models
from django.urls import reverse
from django.contrib.auth.models import User


# Create your models here.

class Category(models.Model):
    title = models.CharField(max_length=150, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    icon = models.ImageField(upload_to='icons/', null=True, blank=True, verbose_name='–ò–∫–æ–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    slug = models.SlugField(unique=True, null=True, verbose_name='–°–ª–∞–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    parent = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True,
                               related_name='subcategories',
                               verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è')

    def get_absolute_url(self):
        return reverse('category', kwargs={'slug': self.slug})

    def get_icon(self):
        if self.icon:
            return self.icon.url
        else:
            return 'üòÅ'

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = '–ö–∞—Ç–µ–≥–æ—Ä–∏—é'
        verbose_name_plural = '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏'


class Product(models.Model):
    title = models.CharField(max_length=250, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    description = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    price = models.FloatField(verbose_name='–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞')
    quantity = models.IntegerField(default=0, verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    color_name = models.CharField(max_length=100, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞')
    color_code = models.CharField(max_length=10, verbose_name='–ö–æ–¥ —Ü–≤–µ—Ç–∞', default='#ffffff')
    width = models.CharField(max_length=10, verbose_name='–®–∏—Ä–∏–Ω–∞')
    depth = models.CharField(max_length=10, verbose_name='–ì–ª—É–±–∏–Ω–∞')
    height = models.CharField(max_length=10, verbose_name='–í—ã—Å–æ—Ç–∞')
    discount = models.IntegerField(verbose_name='–°–∫–∏–¥–∫–∞', null=True, blank=True)
    category = models.ForeignKey(Category, on_delete=models.CASCADE,
                                 related_name='products', verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è')
    model = models.ForeignKey('ProductModel', on_delete=models.CASCADE, blank=True, null=True, verbose_name='–ú–æ–¥–µ–ª—å')
    slug = models.SlugField(unique=True, null=True, verbose_name='–°–ª–∞–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    created_at = models.DateTimeField(auto_now_add=True, null=True, blank=True, verbose_name='–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è')
    updated_at = models.DateTimeField(auto_now=True, null=True, blank=True, verbose_name='–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è')


    def get_absolute_url(self):
        return reverse('product', kwargs={'slug': self.slug})

    def get_first_photo(self):
        if self.images:
            return self.images.first().image.url
        else:
            return '-'


    def __str__(self):
        return self.title

    class Meta:
        verbose_name = '–¢–æ–≤–∞—Ä'
        verbose_name_plural = '–¢–æ–≤–∞—Ä—ã'



class ImageProduct(models.Model):
    image = models.ImageField(upload_to='images/', verbose_name='–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞')
    product = models.ForeignKey(Product, on_delete=models.CASCADE,
                                related_name='images', verbose_name='–¢–æ–≤–∞—Ä')


    def __str__(self):
        return self.product.title

    class Meta:
        verbose_name = '–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞'
        verbose_name_plural = '–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–æ–≤'



class ProductModel(models.Model):
    title = models.CharField(max_length=150, verbose_name='–ú–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–∞')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è')

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = '–ú–æ–¥–µ–ª—å'
        verbose_name_plural = '–ú–æ–¥–µ–ª–∏'




class FavoriteProduct(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    product = models.ForeignKey(Product, on_delete=models.CASCADE, verbose_name='–¢–æ–≤–∞—Ä')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è')

    def __str__(self):
        return f'–ü–æ–ª—å–∑–æ–≤–∞–µ—Ç–ª—å: {self.user.username} –¢–æ–≤–∞—Ä: {self.product.title}'

    class Meta:
        verbose_name = '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'
        verbose_name_plural = '–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã'



# ========================= –ú–æ–¥–µ–ª–∏ –¥–ª—è –ó–∞–∫–∞–∑–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ==============

class Customer(models.Model):
    user = models.OneToOneField(User, on_delete=models.SET_NULL, null=True, verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

    def __str__(self):
        return f'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {self.user.first_name}'

    class Meta:
        verbose_name = '–ü–æ–∫—É–ø–∞—Ç–µ–ª—è'
        verbose_name_plural = '–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏'


class Order(models.Model):
    customer = models.ForeignKey(Customer, on_delete=models.SET_NULL, null=True, verbose_name='–ü–æ–∫—É–ø–∞—Ç–µ–ª—å')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞')
    is_completed = models.BooleanField(default=False, verbose_name='–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞')
    payment = models.BooleanField(default=False, verbose_name='–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã')
    shipping = models.BooleanField(default=True, verbose_name='–î–æ—Å—Ç–∞–≤–∫–∞')

    def __str__(self):
        return f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {self.pk}, –Ω–∞ –∏–º—è: {self.customer.user.username}'

    class Meta:
        verbose_name = '–ó–∞–∫–∞–∑'
        verbose_name_plural = '–ó–∞–∫–∞–∑—ã'

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞ –∏ –∫–æ–ª-–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
    @property
    def get_order_total_price(self):
        order_products = self.orderproduct_set.all() # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–≤—ã –ó–∞–∫–∞–∑–∞ –ø–æ –æ–±—Ä–æ–∑—É –∫–ª–∞—Å—Å–∞ –ø—Ä–∏–≤—è–∑–∫–∏
        total_price = sum([i.get_total_price for i in order_products])  # [10 000, 10 0000, 20 0000]
        return total_price


    @property
    def get_order_total_quantity(self):
        order_products = self.orderproduct_set.all()
        total_quantity = sum([i.quantity for i in order_products])  # [2, 1, 1]
        return total_quantity


class OrderProduct(models.Model):
    product = models.ForeignKey(Product, on_delete=models.SET_NULL, null=True, verbose_name='–¢–æ–≤–∞—Ä')
    order = models.ForeignKey(Order, on_delete=models.SET_NULL, null=True, verbose_name='–ó–∞–∫–∞–∑')
    quantity = models.IntegerField(default=0, verbose_name='–í –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ')
    added_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è')

    def __str__(self):
        return f'–¢–æ–≤–∞—Ä {self.product.title} –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ: {self.order.pk}'


    class Meta:
        verbose_name = '–ó–∞–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä'
        verbose_name_plural = '–ó–∞–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã'

    # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–º–º—ã –∑–∞–∫–∞–∑–∞ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
    @property
    def get_total_price(self):
        if self.product.discount:
            sun_proc = (self.product.price * self.product.discount) / 100
            self.product.price -= sun_proc

        return self.product.price * self.quantity


    def total_price(self):
        return self.product.price * self.quantity


class ShippingAddress(models.Model):
    customer = models.ForeignKey(Customer, on_delete=models.SET_NULL, null=True, verbose_name='–ü–æ–∫—É–ø–∞—Ç–µ–ª—å')
    order = models.ForeignKey(Order, on_delete=models.SET_NULL, null=True, verbose_name='–ó–∞–∫–∞–∑–∞')
    address = models.CharField(max_length=150, verbose_name='–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤)')
    phone = models.CharField(max_length=30, verbose_name='–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    comment = models.TextField(verbose_name='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É', max_length=200)
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏')
    region = models.ForeignKey('Region', on_delete=models.SET_NULL, null=True, verbose_name='–†–µ–≥–∏–æ–Ω')
    city = models.ForeignKey('City', on_delete=models.SET_NULL, null=True, verbose_name='–ì–æ—Ä–æ–¥')

    def __str__(self):
        return f'–î–æ—Å—Ç–∞–≤–∫–∞ –¥–ª—è {self.customer.user.first_name} –Ω–∞ –∑–∞–∫–∞–∑ ‚Ññ{self.order.pk}'


    class Meta:
        verbose_name = '–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏'
        verbose_name_plural = '–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–æ–∫'




class Region(models.Model):
    title = models.CharField(max_length=150, verbose_name='–†–µ–≥–∏–æ–Ω')

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = '–†–µ–≥–∏–æ–Ω'
        verbose_name_plural = '–†–µ–≥–∏–æ–Ω—ã'


class City(models.Model):
    title = models.CharField(max_length=150, verbose_name='–≥–æ—Ä–æ–¥')
    region = models.ForeignKey(Region, on_delete=models.CASCADE, verbose_name='–†–µ–≥–∏–æ–Ω', related_name='cities')

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = '–ì–æ—Ä–æ–¥'
        verbose_name_plural = '–ì–æ—Ä–æ–¥–∞'







